

//using InheritanceAssignment;

//Create the following classes
//Employee
//   Prop	
//	string Name -> no blanks
//	int EmpNo -> readonly, autogenerated
//	short DeptNo -> > 0

//    abstract decimal Basic
//   Methods
//    abstract decimal CalcNetSalary()


//Manager: Employee
//   Prop

//    string Designation -> cant be blank
	

//GeneralManager : Manager
//   Prop
// 	string Perks -> no validations

//CEO : Employee
//      Make CalNetSalary() a sealed method

//NOTE : Overloaded constructors in all classes calling their base class constructor
//All classes must implement IDbFunctions interface
//All classes to override the abstract members defined in the base class(Employee). Basic property to have different validation in different classes.
//CalcNetSalary() to have different validation in different classes.


using System.Security.Cryptography.X509Certificates;
using System.Xml.Linq;

namespace InheritanceAssignment
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Manager m1 = new Manager("Pratik",10,11000,"Manger");
            m1.Display();
            m1.Insert();
            m1.Update();
            m1.Delete();

            GeneralManager gm2 = new GeneralManager("Papa", 20,25000, "Manger","starBoy");
            gm2.Display();
            gm2.Insert();
            gm2.Update();
            gm2.Delete();

            CEO c1 = new CEO("Baba", 30, 60000);
            c1.Display();
            c1.Insert();
            c1.Update();
            c1.Delete();

            Console.WriteLine(m1.EmpNo);
            Console.WriteLine(gm2.EmpNo);
            Console.WriteLine(c1.EmpNo);


        }
    }

    public interface IDbFunctions
    {
       void Insert();
        void Update();
        void Delete();
    }
    public abstract class Employee:IDbFunctions
    {
        string name;
        static int empNo = 0;
        short depNo;
        protected decimal basic;

        public abstract decimal CalcNetSalary();


         public string Name
        {
            set
            {
                if (value == "")
                {
                    Console.WriteLine("name should not empty");
                }
                else
                {
                    name = value;
                }
            }
            get
            {
                return name;
            }
        }
        public int EmpNo
        {

            get;
           
        }
        public short DepNo
        {
            set
            {
                if (value < 0)
                {
                    Console.WriteLine("Invalid DepNo");
                }
                else
                {
                    depNo = value;
                }
            }
            get
            {
                return depNo;
            }
        }
        public abstract decimal Basic
        {
            set;
            get;
        }

        public Employee(string name = "Unknown", short deptNo = 1, decimal basic = 1000)
        {
            this.EmpNo = ++empNo;
            this.Name = name;
            this.DepNo = deptNo;
            this.Basic= basic;

        }
        public void Display()
        {
            Console.WriteLine("EmpNo: "+EmpNo+" Name: "+Name+" DepNo: "+DepNo+" Basic: "+Basic);

        }

        public void Insert()
        {
            Console.WriteLine("Employee Insert");
        }

       public void Update()
        {
            Console.WriteLine("Employee Update");
        }

        public void Delete()
        {
            Console.WriteLine("Employee Delete");
        }
    }

    public class Manager : Employee,IDbFunctions
    {
        string designation;

        public string Designation
        {
            set
            {
                if (value == "")
                {
                    Console.WriteLine("designation should not empty");
                }
                else
                {
                    designation = value;
                }
            }
            get
            {
                return designation;
            }
        }
        public override decimal Basic
        {
            set
            {
                if(value<100000 && value > 10000)
                {
                    basic= value;
                }
                else
                {
                    Console.WriteLine("basic value not in range");
                }
            }
            get
            {
                return basic;
            }
        }
        public Manager(string name = "Unknown", short deptNo = 1, decimal basic = 6000, string designation="M"):base(name,deptNo,basic)
        {

            this.Designation = designation;

        }
        public override decimal CalcNetSalary()
        {
            return Basic * 2;
        }
        public void Display()
        {
            Console.WriteLine("EmpNo: " + EmpNo + " Nmae: " + Name + " DepNo: " + DepNo +" Designation: "+Designation+" Basic: " + Basic+" netSalary: "+CalcNetSalary());

        }
        public void Insert()
        {
            Console.WriteLine("Manager Insert");
        }

        public void Update()
        {
            Console.WriteLine("Manager Update");
        }

        public void Delete()
        {
            Console.WriteLine("Manager Delete");
        }


    }

    public class GeneralManager : Manager,IDbFunctions
    {
        string perks;

        public string Perks
        {
            set;

            get;
           
        }
        public override decimal Basic
        {
            set
            {
                if (value < 100000 && value > 20000)
                {
                    basic = value;
                }
                else
                {
                    Console.WriteLine("basic value not in range");
                }
            }
            get
            {
                return basic;
            }
        }
        public GeneralManager(string name = "Unknown", short deptNo = 1, decimal basic = 10000, string designation = "GM",string perks="defEmp") : base(name, deptNo, basic,designation)
        {

            this.Perks = perks;

        }
        public override decimal CalcNetSalary()
        {
            return Basic * 5;
        }
        public void Display()
        {
            Console.WriteLine("EmpNo: " + EmpNo + " Nmae: " + Name + " DepNo: " + DepNo + " Designation: " + Designation +" Perks: " +Perks+ " Basic: " + Basic + " netSalary: " + CalcNetSalary());

        }
        public void Insert()
        {
            Console.WriteLine("GeneralManager Insert");
        }

        public void Update()
        {
            Console.WriteLine("GeneralManager Update");
        }

        public void Delete()
        {
            Console.WriteLine("GeneralManager Delete");
        }

    }
    public class CEO : Employee, IDbFunctions
    {
      

       
        public sealed override decimal Basic
        {
            set
            {
                if (value < 500000 && value > 50000)
                {
                    basic = value;
                }
                else
                {
                    Console.WriteLine("basic value not in range");
                }
            }
            get
            {
                return basic;
            }
        }
        public CEO(string name = "Unknown", short deptNo = 1, decimal basic = 40000) : base(name, deptNo, basic)
        {

        }
        public sealed override decimal CalcNetSalary()
        {
            return Basic * 12;
        }
        public void Display()
        {
            Console.WriteLine("EmpNo: " + EmpNo + " Nmae: " + Name + " DepNo: " + DepNo + " Basic: " + Basic + " netSalary: " + CalcNetSalary());

        }
        public void Insert()
        {
            Console.WriteLine("CEO Insert");
        }

        public void Update()
        {
            Console.WriteLine("CEO Update");
        }

        public void Delete()
        {
            Console.WriteLine("CEO Delete");
        }

    }


}